name: Sync Package Updates

on:
  repository_dispatch:
    types: [package_updated]
  workflow_dispatch:
    inputs:
      test_repository:
        description: 'Test repository URL'
        required: false
        default: 'https://github.com/nfya-lab/example-package1'
      test_package:
        description: 'Test package name'  
        required: false
        default: 'net.nfya.example-package1'
      test_version:
        description: 'Test version'
        required: false
        default: '1.0.3'

permissions:
  contents: write

jobs:
  sync-package:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Set variables
      id: vars
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "repository=${{ github.event.inputs.test_repository }}" >> $GITHUB_OUTPUT
          echo "package_name=${{ github.event.inputs.test_package }}" >> $GITHUB_OUTPUT  
          echo "version=${{ github.event.inputs.test_version }}" >> $GITHUB_OUTPUT
        else
          echo "repository=${{ github.event.client_payload.repository }}" >> $GITHUB_OUTPUT
          echo "package_name=${{ github.event.client_payload.package_name }}" >> $GITHUB_OUTPUT
          echo "version=${{ github.event.client_payload.version }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Log received event
      run: |
        echo "Event type: ${{ github.event_name }}"
        echo "Repository: ${{ steps.vars.outputs.repository }}"
        echo "Package: ${{ steps.vars.outputs.package_name }}"
        echo "Version: ${{ steps.vars.outputs.version }}"
        
    - name: Update packages.json if needed
      run: |
        REPO_URL="${{ steps.vars.outputs.repository }}"
        PACKAGE_NAME="${{ steps.vars.outputs.package_name }}"
        
        # packages.jsonに該当パッケージが存在するかチェック
        if ! grep -q "$PACKAGE_NAME" packages.json; then
          echo "Adding new package to packages.json"
          
          # packages.jsonを更新（新しいパッケージを追加）
          jq --arg name "$PACKAGE_NAME" --arg repo "$REPO_URL" \
            '.packages += [{
              "name": $name,
              "repo": $repo,
              "packageJsonPath": "package.json"
            }]' packages.json > packages_tmp.json
          mv packages_tmp.json packages.json
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add packages.json
          git commit -m "Auto-add package $PACKAGE_NAME to repository"
        else
          echo "Package $PACKAGE_NAME already exists in packages.json"
        fi
        
    - name: Update VPM repository index
      run: node update-packages.js
      
    - name: Check for changes
      id: check_changes
      run: |
        if git diff --quiet index.json; then
          echo "changes=false" >> $GITHUB_OUTPUT
        else
          echo "changes=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Commit updated index.json
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add index.json
        git commit -m "Auto-update VPM repository from ${{ steps.vars.outputs.package_name }} v${{ steps.vars.outputs.version }}"
        git push